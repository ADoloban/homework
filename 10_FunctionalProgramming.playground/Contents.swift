import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.

// TODO: - üßë‚Äçüíª
/*
 –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É—Ç–±–æ–ª–∏—Å—Ç.
 –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π—Å—Ç–≤–∞: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≤–æ–∑—Ä–∞—Å—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤, –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø–∞–¥–∞—é—â–∏–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –≤—Ä–∞—Ç–∞—Ä—å... - –ø–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ).
 –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç–∏–ø–∞ —Ñ—É—Ç–±–æ–ª–∏—Å—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏.
 –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤ –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ - —ç—Ç–æ –±—É–¥–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.
 
 –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏—Ö –¥–∞–Ω–Ω—ã–µ. –í —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–µ–¥ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—á–∞—Ç–∞—Ç—å—Å—è –µ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä.
 
 –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ.
 –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é). –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –ø–æ –∏–º–µ–Ω–∏. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ.
 –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º (—Ç.–µ. –Ω–∞–ø–∞–¥–∞—é—â–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏ —Ç.–¥.)
 –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∏—Ç—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π –≥–æ–ª–æ–≤.
 */

enum PlayerPosition: String{
    case forward
    case defender
    case goalkeeper
}

struct Player{
    let name: String
    let surname: String
    let age: Int
    let countOfGoals: Int
    let position: PlayerPosition
}

let defender = Player(name: "John", surname: "Bradley", age: 30, countOfGoals: 3, position: .defender)
let forward = Player(name: "Sam", surname: "Williams", age: 23, countOfGoals: 8, position: .forward)
let goalkeeper = Player(name: "David", surname: "Brown", age: 27, countOfGoals: 0, position: .goalkeeper)

let footballTeam = [defender, forward, goalkeeper]

func printTeam(_ team: [Player]){
    team.enumerated().forEach {
        print("Player \($0). Name: \($1.name), surname: \($1.surname), age: \($1.age), count of goals: \($1.countOfGoals), position: \($1.position)")
    }
}

printTeam(footballTeam)

let sortedByGoals = footballTeam.sorted { $0.countOfGoals > $1.countOfGoals }

let sortedBySurname = footballTeam.sorted {
    if $0.surname != $1.surname {
        return $0.surname < $1.surname
    } else {
        return $0.name < $1.name
    }
}

print(sortedByGoals)
print(sortedBySurname)

//First solution
func sortByPosition(_ team: [Player]) -> [String: [Player]] {
    var sortedPlayers = [String: [Player]]()
    
    team.forEach {
        if sortedPlayers[$0.position.rawValue] == nil{
            sortedPlayers[$0.position.rawValue] = [$0]
        } else {
            sortedPlayers[$0.position.rawValue]?.append($0)
        }
    }
    return sortedPlayers
}

//Second solution
func sortByPosition2(_ team: [Player]) -> ([Player], [Player], [Player]) {
    var forwards = [Player](), defenders = [Player](), goalkeepers = [Player]()
    
    forwards = team.filter { $0.position == .forward }
    defenders = team.filter { $0.position == .defender }
    goalkeepers = team.filter { $0.position == .goalkeeper }
    
    return (forwards, defenders, goalkeepers)
}

let sortedByPosition = sortByPosition(footballTeam)

let numberOfGoals = footballTeam.reduce(0, { $0 + $1.countOfGoals })

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫–∞–∂–¥–æ–π.
 */

