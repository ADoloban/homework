import UIKit

/*
 MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
 TODO: - üßë‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –†–µ—à–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏—è:
 */

 // - –û–±—ä—è–≤–∏—Ç–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–µ—á–∞—Ç–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.

func greeting(){
    print("Hello!")
}
greeting()


 // - –û–±—ä—è–≤–∏—Ç–µ –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –∏–º—è, –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ parameter name only. –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é

func greeting(name: String){
    print("Hello \(name)!")
}
greeting(name: "John")

 // - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥—ã—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è argument label.

func greeting(to name: String){
    print("Hello \(name)!")
}
greeting(to: "Joe")

 // - –û–±—ä—è–≤–∏—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ String —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –∫–∞–∂–¥–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ "!" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

let names: [String] = ["Kiril", "Vlad", "Dima", "Sasha"]
func addToWords(_ array: [String]) -> [String]{
    var result: [String] = []
    for name in array{
        result.append("\(name)!")
    }
    return result
}
addToWords(names)


 // - –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–≤–æ–∑–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä inout.

func addToWords(_ array: inout [String]){
    for i in 0..<array.count{
        array[i] += "!"
    }
}
addToWords(names)


 // - –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∏–ø–∞ Int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

func summ(firstNumber: Int, secondNumber: Int) -> Int{
    return firstNumber + secondNumber
}
summ(firstNumber: 4, secondNumber: 5)

 // - –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ Int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º–∞—Å—Å–∏–≤–∞.

let numbers: [Int] = [2, 4, 8, 45, -9]

// first solution
func findMinAndMax(in array: [Int]) -> (Int?, Int?){
    return(array.min(), array.max())
}

//second solution
func findMinAndMax(array: [Int]) -> (Int, Int){
    let min = array.min() ?? 0
    let max = array.max() ?? 0
    return (min, max)
}

findMinAndMax(in: numbers)
findMinAndMax(array:  numbers)


/*
 –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø–æ —É—á–µ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.
 –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö. –≠—Ç–æ –±—É–¥—É—Ç —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤ –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∑–∞—á–∏—Å–ª—è—Ç—å –µ–≥–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç. –°—Ä–µ–¥–∏–Ω–π –±–∞–ª –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª. –í –∏—Ç–æ–≥–µ –≤—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ª—É—á—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ä–µ—á–∏ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ—á—å –ª—É—á—à–µ–≥–æ —É—á–µ–Ω–∏–∫–∞. –ü–æ–º–µ—Ç—å—Ç–µ, –∫—Ç–æ –µ–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç.
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É –¥–∏–ø–ª–æ–º (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–¥–∞—á–µ –µ–º—É –¥–∏–ø–ª–æ–º–∞).
 –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç—á–∏—Å–ª—è—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í–µ–¥—å –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –æ—Ç—á–∏—Å–ª–∏—Ç—å.
 –ù–∞–ø–æ–ª–Ω–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–≤–µ–¥–∏—Ç–µ –∏—Ö –¥–æ –≤—ã–ø—É—Å–∫–∞!
 */

var students: [String : Double?] = [:]

func addToUniversity(name: String){
    students.updateValue(nil, forKey: name)
}

func addStudentMark(mark: Double, name: String){
    students.updateValue(mark, forKey: name)
}

func findBestStudent() -> String{
    var bestStudent: String = ""
    var highestRating: Double = 0.0
    for (student, rating) in students{
        if let rating = rating {
            if rating > highestRating {
                bestStudent = student
                highestRating = rating
            }
        }
    }
    return bestStudent
}

func studentsSpeech(){
    print("It's a \(findBestStudent())'s speech. Bla-bla-bla.")
}

func giveDiplom(){
    for (student, _) in students{
        print("\(student) received a diploma")
    }
}

func deductStudent(_ name: String){
    students.removeValue(forKey: name)
}

addToUniversity(name: "Vanya")
addToUniversity(name: "Vika")
addToUniversity(name: "Oleg")
addToUniversity(name: "Anya")

addStudentMark(mark: 89.4, name: "Vanya")
addStudentMark(mark: 95.2, name: "Vika")
addStudentMark(mark: 73.8, name: "Oleg")
addStudentMark(mark: 84.9, name: "Anya")
print(students)
studentsSpeech()

giveDiplom()

deductStudent("Vanya")
deductStudent("Vika")
deductStudent("Oleg")
deductStudent("Anya")

print(students)
/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é (–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –æ—Ç–≤–µ—Ç–∏—Ç—å):
 - –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ argument label and parameter name?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∫–≤–æ–∑–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä (inout)?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ nested functions?
 */
