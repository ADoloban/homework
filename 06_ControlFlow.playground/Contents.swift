import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.

// TODO: - üßë‚Äçüíª –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –†–µ—à–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏—è:
// - –∏—Å–ø–æ–ª—å–∑—É—è while loop —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ "Hello" 5 —Ä–∞–∑

var i: Int = 0
while i<5{
    print("Hello")
    i+=1
}

// - –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–æ–π –∂–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—è repeat-while loop

i = 0
repeat{
    print("Hello")
    i+=1
}while i<5

// - –æ–±—ä—è–≤–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—è switch statement —Å–¥–µ–ª–∞–π—Ç–µ –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

let inputString: String = "I hate Russia"
var resultString: String = String()
for char in inputString{
    switch char{
    case "a", "e", "i", "o", "u", "y":
        resultString += String(char).uppercased()
    default:
        resultString += String(char)
    }
}
print(resultString)

// - –æ–±—ä—è–≤–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ Int –∏ –Ω–∞–ø–∏—à–∏—Ç–µ switch, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ range.
let number: Int = 9

switch number{
case (-100...4):
    print("Number is between -100 and 4")
case (3...241):
    print("Number is between 3 and 241")
default:
    print("Range not known")
}

// - –æ–±—ä—è–≤–∏—Ç–µ tuple —Å –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–∞–ø–∏—à–∏ switch –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π tuple

let tuple: (String, Int) = ("Sasha", 29)

switch tuple{
case(let name, 0...17):
    print("\(name) is a child")
case(let name, 18...49):
    print("\(name) is an adult")
case(let name, 50...105):
    print("\(name) is a pensioner")
default:
    print("age entered incorrectly")
}
    /*
 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—É—Å—Ç—å –±—É–¥–µ—Ç 3. –ö–∞–∂–¥—ã–π —Å—Ç—É–¥–µ–Ω—Ç –ø–æ—Å–µ—Ç–∏–ª 5 –∫—É—Ä—Å–æ–≤ –∏ –∏–º–µ–µ—Ç –±–∞–ª –ø–æ —ç—Ç–∏–º –∫—É—Ä—Å–∞–º, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª –∑–∞ –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –∫—É—Ä—Å–æ–≤. –í—ã—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤ —Å—É–º–º–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤) –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –†–µ–π—Ç–∏–Ω–≥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è (–æ—Ç –ª—É—á—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ —Ö—É–¥—à–µ–º—É).
*/
let studentsMarks: [String: [Float]] = [
    "Anya": [67.2, 89.4, 95.9, 80.1, 75.3],
    "Vanya": [73.2, 91.6, 64.7, 80.3, 77.3],
    "Kolya": [93.2, 84.3, 79.2, 67.8, 95.3]]

var rating: [String: Float] = [:]
var averageMark: Float
for (student, marks) in studentsMarks {
    averageMark = 0.0
    for mark in marks{
        averageMark += mark
    }
    averageMark /= 5
    rating.updateValue(averageMark, forKey: student)
}

let sortedDictionary = rating.sorted{ $0.value > $1.value} // I read a little about closure, so I decided to use it

for (student, mark) in sortedDictionary{
    print("The \(student)'s grade is \(mark) points")
}


/*
 TODO: - ‚ùì –ö –∏–∑—É—á–µ–Ω–∏—é:
 - –í—ã—É—á–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –≤—Å–µ—Ö statements and loops
 - –ó–Ω–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è continue, break, fallthrow, return, throw
 */

