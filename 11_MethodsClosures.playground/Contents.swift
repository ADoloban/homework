import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.

// TODO: - üßë‚Äçüíª
/*
 –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 —á–∏—Å–ª–∞, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –∏—Ö —Å–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏—Å–≤–æ–π—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –µ–≥–æ.
 */

let multiplyClosure = { (a: Double, b: Double) -> Double in
    return a + b
}

multiplyClosure(3,8)

/*
 –û–±—ä—è–≤–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è sorted –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è.
 */

let randomString = "London is the capital of Great Britain"

randomString.sorted(by: <)

/*
 –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ó–∞–º—ã–∫–∞–Ω–∏–µ —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç.
 –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Ç 1 –¥–æ 5, –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—á–∞—Ç–∞—è –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏.
 –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞, –≤—ã–∑–æ–≤–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ.
 –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–µ print("Closure").
 –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
 */

func printNumber(closure: () -> Void) {
    for i in 1...5 {
        print(i)
    }
    closure()
}

printNumber { print("Closure") }

/*
 –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é modify, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ Int –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ —Ç–∏–ø–∞ (Int) -> Int. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ç–∏–ø–∞ Int. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–º—ã–∫–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –∏ –±—É–¥–µ—Ç —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å. –í–µ—Ä–Ω–∏—Ç–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–º—ã–∫–∞–Ω–∏–µ–º.
 –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é modify –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–º—ã–∫–∞–Ω–∏—è, –ø—É—Å—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ 2.
 */

let numbers = [4, 8, 5, -3, 2, -4]

let addFive = { $0 + 5 }

func modify(array: [Int], closure: (Int) -> Int) -> [Int] {
    let modifyArray = array.map{ closure($0) }
    return modifyArray
}

let newNumbers = modify(array: numbers, closure: addFive)

/*
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task. –û–±—ä—è–≤–∏—Ç–µ –≤ –Ω–µ–º —Å–≤–æ–π—Å—Ç–≤–æ reloadData –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ (([String]) -> Void)?.
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å –º–µ—Ç–æ–¥ get, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –ª—é–±–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Å–≤–æ–π—Å—Ç–≤–æ reloadData –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –Ω–æ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ String. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–¥ –∫—Ä—É–≥–ª—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∏–ø–∞ closure?(parameters)
 –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø—Ä–∏—Å–≤–æ–π—Ç–µ —Å–≤–æ–π—Å—Ç–≤—É reloadData –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ get.
 */

class Task {
    let reloadData: (([String]) -> Void)?
    
    func get(){
        var number: Int
        var numbersArray = [String]()
        for _ in 1...5 {
            number = Int.random(in: -100...100)
            numbersArray.append(String(number))
        }
        reloadData?(numbersArray)
    }
    
    init(reloadData: (([String]) -> Void)?) {
        self.reloadData = reloadData
    }
}

let task = Task(reloadData: { print($0) })

task.get()

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é
 
 –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Car —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ brand, number, isBroken (false –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
 –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –º–µ—Ç–æ–¥ move, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—á–∞—Ç—å "move" –µ—Å–ª–∏ –º–∞—à–∏–Ω–∞ –Ω–µ —Å–ª–æ–º–∞–Ω–∞ –∏–ª–∏ —Å–æ–æ–±–µ—â–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ —Å–ª–æ–º–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–æ–º–∞–Ω–∞.
 
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Autoservice —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º cars, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–∞—à–∏–Ω, –ø—Ä–∏–µ—Ö–∞–≤—à–∏—Ö –Ω–∞ —Ä–µ–º–æ–Ω—Ç.
 –î–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ–π—Å—Ç–≤–æ cars –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—á–∞—Ç–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–∞—è-—Ç–æ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º-—Ç–æ –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–µ–º–æ–Ω—Ç –ª–∏–±–æ –≤—ã–¥–∞–Ω–∞ –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞.
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å Autoservice —Ñ—É–Ω–∫—Ü–∏—é fix, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Car –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ (–Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ).
 
 –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ 3 —Å–µ–∫—É–Ω–¥—ã, —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞–≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–º–æ–Ω—Ç–∞. –î–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
 
 DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
 // –≠—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 3 —Å–µ–∫. –í—ã–∑–æ–≤–µ—Ç–µ –∑–¥–µ—Å—å –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä.
 }
 
 –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –º–∞—à–∏–Ω—ã –≤ —Ä–µ–º–æ–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –≤ —Å–≤–æ–π—Å—Ç–≤–æ cars, –∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞ - —É–¥–∞–ª–∏—Ç—å.
 
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Person. –í –∫–ª–∞—Å—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ name, car, service.
 –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä.
 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ goToHome, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –º–∞—à–∏–Ω—ã –∏ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ move.
 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ goToService, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ fix. –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ–º–µ—Ç—å—Ç–µ, —á—Ç–æ –º–∞—à–∏–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ —Å–ª–æ–º–∞–Ω–∞, –∏–∑–º–µ–Ω–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–µ isBrocken –Ω–∞ false.
 
 –ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤, —Å–Ω–∞—á–∞–ª–∞ Autoservice, –ø–æ—Ç–æ–º Car, –ø–æ—Ç–æ–º Person.
 –£ person –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ goToHome()
 –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É Car –∏ —Å–ª–æ–º–∞–π—Ç–µ –º–∞—à–∏–Ω—É.
 –£ person –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ goToService() –∏ —Å–ª–µ–¥–æ–º goToHome().
 –†–∞–∑–±–µ—Ä–∏—Ç–µ—Å—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞.
 
 */

struct Car {
    let brand: String
    let number: String
    var isBroken = false
    
    init(brand: String, number: String){
        self.brand = brand
        self.number = number
    }
    
    func move(){
        if isBroken {
            print("Car is broken")
        } else {
            print("Move")
        }
    }
}

class Autoservice{
    var cars: [Car] = [] {
        didSet {
            if let car = cars.last {
                if car.isBroken {
                    print("Car with number \(car.number) has been taken for repair.")
                } else {
                    print("Car with number \(car.number) has been repaired and returned.")
                }
            }
        }
    }
    
    func fix(car: Car, closure: @escaping () -> Void){
        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            closure()
        }
    }
}

class Person {
    let name: String
    var car: Car
    let service: Autoservice
    
    init(name: String, car: Car, service: Autoservice){
        self.name = name
        self.car = car
        self.service = service
    }
    
    func goToHome(){
        car.move()
    }
    
    func goToService(){
        service.cars.append(car)
        service.fix(car: car, closure: { print("Car is repaired")})
        service.cars.remove(at: 0)
        car.isBroken = false
    }
}

let person = Person(name: "Tom", car: Car(brand: "BMW", number: "SDR351"), service: Autoservice())
person.goToHome()
person.car.isBroken = true
person.goToService()
person.goToHome()

/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 - –ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–æ–¥—ã?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ closures?
 - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è trailing closures?
 - –í —á–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∑–∞–º—ã–∫–∞–Ω–∏—è?
 - –ß—Ç–æ —Ç–∞–∫–æ–µ escaping closures (—Å–±–µ–≥–∞—é—â–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è)?
 - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–≤—Ç–æ–∑–∞–º—ã–∫–∞–Ω–∏—è?
 */

