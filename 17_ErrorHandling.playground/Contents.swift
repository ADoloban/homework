import UIKit

// MARK: - üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.
 
// TODO: - üßë‚Äçüíª
/*
 –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ—Ä–∞–±–ª—å –≤ –∫—Ä—É–∏–∑.

 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞—à –∫–æ—Ä–∞–±–ª—å.
 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞: –∫–∞–ø–∏—Ç–∞–Ω, –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–ø–∏—Ç–∞–Ω–∞, –º–µ—Ö–∞–Ω–∏–∫, –±–æ—Ü–º–∞–Ω, –¥–æ–∫—Ç–æ—Ä, –º–∞—Ç—Ä–æ—Å –∏ —Ç.–¥.
 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: –ø–æ–≤–∞—Ä, –≥–æ—Ä–Ω–∏—á–Ω–∞—è, –∞—Ä—Ç–∏—Å—Ç –∏ —Ç.–¥.
 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.

 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞. –°–≤–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (private(set)).
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞.
 –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞

 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–∏—Ö –æ—à–∏–±–æ–∫:
     ‚ÅÉ    –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç.
     ‚ÅÉ    –ï—Å–ª–∏ –Ω–∞ –∫–æ—Ä–∞–±–ª–µ –Ω–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏–ª–∏ –º–µ—Ö–∞–Ω–∏–∫–∞, –∫–æ—Ä–∞–±–ª—å –æ—Ç–ø–ª—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –°–æ–æ–±—â–∏—Ç–µ, –∫–æ–≥–æ –µ—â–µ –∂–¥–µ–º.
     ‚ÅÉ    –ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –∏–∑ —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞ —Å—Ç–∞–∂ –º–µ–Ω—å—à–µ 3-—Ö –ª–µ—Ç, —Å–æ–æ–±—â–∏—Ç–µ –∫—Ç–æ —ç—Ç–æ.

 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∫–∞—é—Ç.
 –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–∞—é—Ç –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞.
 –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∞–±–ª—å —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —á—Ç–µ–Ω–∏—è - –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.
 –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø–æ—Å–∞–¥–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞ –∫–æ—Ä–∞–±–ª—å. –ï—Å–ª–∏ —É –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–∞, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–µ—Å—Ç—å –Ω–∞ –∫–æ—Ä–∞–±–ª—å. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º.
 
 –ò–∑–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—é—Ç –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫–∏—Ö –∫–∞—é—Ç –∏ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
 –ò–∑–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø–ª—ã—Ç–∏–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 30% –æ—Ç–ø–ª—ã—Ç–∏–µ –±—ã–ª–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –µ—â–µ –Ω—É–∂–Ω–æ –Ω–∞–Ω—è—Ç—å.

 –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø–ª—ã—Ç–∏—é, –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.
 */

class Ship {
    let name: String
    let type: String
    let length: Double
    var economyCabins: Int
    var businessCabins: Int
    var firstClassCabins: Int
    private(set) var crewMembers: [CrewMember]
    private(set) var serviceStaff: [ServiceStaffMember]
    private(set) var passengers: [Passenger] = []
    
    init(name: String,
         type: String,
         length: Double,
         crewMembers: [CrewMember],
         serviceStaff: [ServiceStaffMember],
         economyCabins: Int,
         businessCabins: Int,
         firstClassCabins: Int) {
        self.name = name
        self.type = type
        self.length = length
        self.crewMembers = crewMembers
        self.serviceStaff = serviceStaff
        self.economyCabins = economyCabins
        self.businessCabins = businessCabins
        self.firstClassCabins = firstClassCabins
    }
    
    func addCrewMember(_ member: CrewMember) {
            crewMembers.append(member)
    }
        
    func addServiceStaffMember(_ member: ServiceStaffMember) {
        serviceStaff.append(member)
    }
    
    func addPassenger(_ passenger: Passenger) {
        if passenger.hasTicket {
            passengers.append(passenger)
        } else {
            print("–ü–∞—Å—Å–∞–∂–∏—Ä \(passenger.firstName) \(passenger.lastName) –Ω–µ –º–æ–∂–µ—Ç —Å–µ—Å—Ç—å –Ω–∞ –∫–æ—Ä–∞–±–ª—å –±–µ–∑ –±–∏–ª–µ—Ç–∞.")
        }
    }

    func isShipReady() throws {
        var missingPositions = [CrewPosition]()
        var missingExperienceMembers = [CrewMember]()
        var missingCabins = [String: Int]()
        
        for position in CrewPosition.allCases {
            let membersWithPosition = crewMembers.filter { $0.position == position }
            if membersWithPosition.isEmpty {
                missingPositions.append(position)
            } else {
                let lessExperienceMembers = membersWithPosition.filter { $0.experienceYears < 3 }
                missingExperienceMembers.append(contentsOf: lessExperienceMembers)
            }
        }
        
        if !crewMembers.contains(where: { $0.position == .captain }) {
            throw DepartureError.missingCaptain
        }
        
        if !crewMembers.contains(where: { $0.position == .mechanic }) {
            throw DepartureError.missingMechanic
        }
        
        if !missingPositions.isEmpty {
            throw DepartureError.missingCrewPositions(missingPositions)
        }
        
        if !missingExperienceMembers.isEmpty {
            throw DepartureError.insufficientExperience(missingExperienceMembers)
        }
        
        let totalPassengers = passengers.count
        let totalServiceStaff = serviceStaff.count
        let requiredServiceStaff = Int(Double(totalPassengers) * 0.3)
        
        if totalServiceStaff < requiredServiceStaff {
            let staffNeeded = requiredServiceStaff - totalServiceStaff
            throw DepartureError.insufficientServiceStaff(staffNeeded: staffNeeded)
        }
        
        for passenger in passengers {
            switch passenger.cabinClass {
            case .economy:
                if economyCabins <= 0 {
                    missingCabins["–≠–∫–æ–Ω–æ–º"] = (missingCabins["–≠–∫–æ–Ω–æ–º"] ?? 0) + 1
                } else {
                    economyCabins -= 1
                }
            case .business:
                if businessCabins <= 0 {
                    missingCabins["–ë–∏–∑–Ω–µ—Å"] = (missingCabins["–ë–∏–∑–Ω–µ—Å"] ?? 0) + 1
                } else {
                    businessCabins -= 1
                }
            case .firstClass:
                if firstClassCabins <= 0 {
                    missingCabins["–ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å"] = (missingCabins["–ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å"] ?? 0) + 1
                } else {
                    firstClassCabins -= 1
                }
            }
        }
        
        if let exceededCabins = missingCabins.max(by: { $0.value < $1.value }) {
            throw DepartureError.insufficientCabins(type: exceededCabins.key, count: exceededCabins.value)
        }
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!")
    }
}

enum CrewPosition: CaseIterable {
    case captain
    case firstMate
    case mechanic
    case boatswain
    case doctor
    case sailor
}

enum ServiceStaffPosition {
    case chef
    case housekeeper
    case entertainer
    case concierge
    case bartender
}

struct CrewMember {
    let firstName: String
    let lastName: String
    let position: CrewPosition
    let experienceYears: Int
}

struct ServiceStaffMember {
    let firstName: String
    let lastName: String
    let position: ServiceStaffPosition
    let experienceYears: Int
}

enum DepartureError: Error {
    case missingCrewPositions([CrewPosition])
    case missingCaptain
    case missingMechanic
    case insufficientExperience([CrewMember])
    case insufficientCabins(type: String, count: Int)
    case insufficientServiceStaff(staffNeeded: Int)
}

enum CabinClass {
    case economy
    case business
    case firstClass
}

struct Passenger {
    let firstName: String
    let lastName: String
    let hasTicket: Bool
    let cabinClass: CabinClass
}


/*
 TODO: - ‚ùì –í–æ–ø—Ä–æ—Å—ã –∫ –∏–∑—É—á–µ–Ω–∏—é:
 - –ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑—ã–≤–∞—é—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–π –∏ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –µ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏?
 - –ö–∞–∫ –≤—ã–∑–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é?
 - –ó–∞—á–µ–º –Ω–∞–º –Ω—É–∂–µ–Ω do-catch –±–ª–æ–∫?
 - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏–ø Result?
 - –ß—Ç–æ –¥–µ–ª–∞–µ—Ç defer?
 */


